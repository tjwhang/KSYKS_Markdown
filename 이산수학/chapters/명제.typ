#import "../../TypstTemplate/TypstTemplate.typ": *

= 명제
모든 논리 전개의 기본이 되는 명제(命題)는 명확히 참과 거짓을 판별할 수 있는 단정적인 문장을 말합니다.

#example[
  아래의 문장은 참과 거짓을 판별할 수 있으므로 모두 명제입니다.
  1. 서울은 대한민국의 수도이다.
  2. 도쿄는 중화인민공화국의 수도이다.
  3. $1 + 1 = 2$
  4. $2 + 2 = 5$

  1과 3은 참인 명제이고, 2#footnote[일본인에게는 미안합니다.]와 4#footnote[나인틴 에이티 뽀]는 거짓인 명제입니다.
]

#example[
  아래 문장들은 명제가 아닌 것들입니다.
  1. 지금 몇 시에요?
  2. 이걸 자세히 읽어 보세요.
  3. $x + 1 = 2$
  4. $x + y = z$
]

1과 2는 단정적인 문장이 아닙니다. 3과 4는 변수의 값에 따라 참 거짓 여부가 달라지므로 그 자체로 참과 거짓을 판별할 수 없습니다. 물론 변수에 값을 지정해 주면 3과 4를 명제로 만들 수 있습니다.

명제를 수학적으로 표현하기 위해 문자를 이용해 수를 표기하는 것처럼 문자를 이용해 명제를 변수처럼 표기합니다. 일반적으로 명제를 나타낼 때 쓰이는 문자는 proposition의 p를 딴 $p, q, r, s ...$입니다.

명제를 다루는 학문은 명제 논리라는 학문으로 아리스토텔레스가 처음 개발했습니다. 하지만, 우리가 현재 사용하는 방식은 영국의 수학자인 조지 부울(George Boole)이 1854년 그의 저서인 『The Laws of Thought』에서 처음 제시했습니다. 많은 새로운 명제는 다른 명제에 논리 연산자를 취함으로써 만들어집니다.

#definition(title: "명제의 부정")[
  명제 $p$에 대해 그 부정은 $not p$, $~p$ 또는 $overline(p)$로 나타낸다. 이는 다음을 의미한다.

  "$p$가 아니다."

  명제 $not p$는 'not p' 또는 'p가 아니다'라고 읽는다. $not p$의 진리값은 $p$의 진리값의 반대이다.
]

#example[
  아래 명제를 부정하시오.

  1. 내 컴퓨터는 리눅스로 돌아간다.
  2. $x >= 1$

  #solution[
    1. 내 컴퓨터는 리눅스로 돌아가지 않는다."
    2. $x < 1$
  ]
]

#figure(
  table(
    align: center + horizon,
    columns: 2,
    rows: 3,
    [$p$], [$not p$],
    [T], [F],
    [F], [T],
  ),
)
