#import "../template.typ": *

= 오리엔테이션

== 시작하기 전에

=== 표기법 알림
$z$의 켤레복소수는 보통 수학에서 $overline(z)$, 물리학에서 $z^*$처럼 하는 것이 관례이다. 하지만 복잡한 식에 켤레를 씌울 때는 $overline(z)$가 가독성이 좋다고 판단되어 여기서는 켤레를 $overline(z)$로 나타낸다.

벡터는 $vb(v)$와 같이 굵은 이탤릭(italic)으로 쓴다. $vbu(v)$와 같은 굵은 인쇄체(upright roman)보다 가독성이 좋을 것으로 판단되기 때문이다. ISO(국제표준화기구)에서도 벡터는 굵은 이탤릭 $vb(v)$ 또는 이탤릭 화살표 액센트 $va(v)$ 로 쓸 것을 권장하고 있다. 다만 $va(v)$ 꼴은 가독성이 떨어지며 유클리드 공간 상의 벡터로 그 의미가 한정되기 때문에 현재 고등교육 이상에서는 특별한 경우가 아니면 잘 쓰이지 않는다.

연산자는 $hat(A)$처럼 모두 $hat$ 액센트를 붙이는 것이 관례이나, 혼동이 없는 범위에서는 가독성을 위해 붙이지 않았다.

=== 참고문헌 알림
이 문서는 캐나다 Carleton 대학의 수학 교수 Yuly Billig의 온라인 강의 『Quantum Computing』을 강하게 참고하였다. 이외에도 David J. Griffiths 외의 『Introduction to Quantum Mechanics』3판, R. Shankar의 『Principle of Quantum Mechanics』도 참고했다. 

== 무어의 법칙
캘리포니아 공과대학(CalTech) 화학 박사이자 인텔의 공동창립자인 고든 무어(Gordon Moore, 1929 \~ 2023) 교수는 관찰을 통해 일정 시간동안 컴퓨터 반도체에 집적되는 트랜지스터 수가 2배 이상 증가한다는 "무어의 법칙(Moore's Law)"을 제시했다. 그가 처음 법칙을 제안했을 때 그 "일정 시간"은 1년 정도였다.

#quote(attribution: [Gordon Moore, 1965, "Electronics" 紙])[
  The complexity for minimum component costs has increased at a rate of roughly a factor of two per year. Certainly over the short term this rate can be expected to continue, if not to increase. Over the longer term, the rate of increase is a bit more uncertain, although there is no reason to believe it will not remain nearly constant for at least 10 years.
  #footnote[
  최소 구성 요소 비용에 대한 복잡성은 연간 약 두 배 비율로 증가했습니다. 단기적으로 이 경향은 비율이 증가하지 않더라도 확실히 계속될 것으로 예상할 수 있습니다. 장기적으로 보면 증가율이 다소 불확실하지만 적어도 10년 동안 거의 일정할 것이라고 못 할 이유는 없습니다.
  ]

]

10년 뒤인 1975년, 무어는 법칙을 2년 마다 두 배로 증가한다고 수정했다. 열역학 제 2법칙의 등 여러 한계 때문에 증가 속도는 앞으로도 줄어들 예정이다. 오늘날 트랜지스터는 대략 50개의 원자 내외의 두께로 되어 있는데, 이대로 간다면 우리는 곧 원자 크기의 한계에 직면할 것이고, 그때 작용하는 물리 법칙은 이전과 달라지게 된다. 

한 개의 원자는 한 뭉탱이의 원자와 전혀 다르게 행동하는데(적어도 그렇게 보이는데), 원자 뭉탱이는 고전역학의 지배를 받는 반면 원자 한 개는 양자역학의 지배를 받는다. 원자가 뭉탱이로 있을 때는, 큰수의 법칙에 따라 양자역학에 의한 확률적 현상들이 평균으로 수렴하여 무시해도 될 정도가 된다. 이 말은, 계속해서 트랜지스터 개수를 늘리기 위해 칩의 크기를 줄인다면(즉 집적도를 늘린다면) 곧 디지털 컴퓨터를 설계할 때도 양자 터널링#footnote[나중에 자세히 알아볼 것이므로 앞뒤 다 자르고 간단히 설명하자면, 트랜지스터 크기가 \~ 1 nm 정도로 작아지게 되면, 양자역학적 효과로 인해 전자가 트랜지스터 내부의 절연막을 개무시하고 통과해버릴 수 있다. 즉, 정보 저장 및 계산의 정확성이 보장되지 않는다.] 등의 양자역학적 효과를 고려해야한다는 뜻이다.

== 배경과 역사
양자역학은 이상하고, 인간적 직관에 부합하지 않는다. 우리는 현대 인간 이전까지 양자역학적 효과를 실감하지 못했다. 즉, 인간은 양자역학이 아닌 고전역학적 사고로 진화했으며, 우리의 뇌는 양자역학을 이해하기에 적합하지 않다. 

비록 양자역학의 수학적, 물리적 기반은 이제 잘 다져져 있음에도 불구하고, 양자역학에는 여전히 우리가 해결할 수 없는 문제들이 있다. 처음으로 발견된 양자역학적 현상은 다양한 물질이 방출하는 고유한 선 스펙트럼이었다. 이것을 통해 별의 구성 원소를 알아내기도 한다. 수소 원자의 경우에는 슈뢰딩거 방정식에 따른 꽤 정확한 이론이 있어서, 에너지 준위와 선 스펙트럼의 파장을 계산할 수 있다. 연구가 계속되며, 꽤 작은 원자의 경우라도 스펙트럼의 에너지 준위를 계산해 내려면 막대한 자원이 필요하다는 것을 깨달았다. 슈퍼 컴퓨터가 등장하고도 다중 양자계에서의 에너지 준위 계산은 엄청나게 오랜 시간이 소요된다. 그런데, 자연은 이 막대한 계산을 아무 오류 없이 완벽히 해낼 수 있다.

1980년, 유리 마닌(Юрий Манин, 1937 \~ 2023)은 양자역학적 현상과 씨름하는 것 대신, 양자계를 계산 기계로 사용하는 것이 어떻냐고 그의 저서 "Computable and Uncomputable"에서 제안했다. 그는 현재의 양자 컴퓨팅 패러다임을 연 것이다. 비슷한 시기, 폴 베니오프(Paul Benioff, 1930 \~ 2022)는 튜링 머신의 양자역학적 모델을 제안했다.

1982년, 리처드 파인만(Richard Feynmann, 1918 \~ 1988)은 비슷한 이유로, 지금의 계산기가 고전적이기 때문에 양자역학 문제를 쉽게 풀 수 없다고 하며, 계산기를 양자역학적으로 구동하게 만든다면 이런 문제들을 더 쉽고 빠르게 풀 수 있을 것이라고 했다.

1980년대, 90년대부터 양자컴퓨팅은 컴퓨터과학의 한 분야로 간주되어, 소수의 사람들이 이 분야에서 활동했다. 데이비드 도이치(David Deutsch, 1953 \~ )는 양자 튜링 머신과 도이치-요샤 알고리즘(Deutsch--Josza algorithm)을 개발하였다. 1994년 피터 쇼어(Peter Shor, 1959 \~ )는 RSA 암호화 알고리즘을 무력화하는 양자컴퓨팅 알고리즘을 고안했다. RSA 알고리즘은 현재까지 사용되고 있는 정보 암호화 알고리즘으로, 지금의 슈퍼컴퓨터로도 뚫는 데 너무 오랜 시간이 걸려 사실상 뚫는게 불가능한 알고리즘이다. 이런 이유로 각국 정보기관들은 세계 여러 나라의 각종 데이터를 암호화된 상태로 마구 저장해두고 있다. 신뢰성 있는 양자컴퓨터가 나오게 된다면 이 데이터들의 암호를 풀어 중요한 비밀 정보를 열람할 수 있을지도 모르기 때문이다.

양자컴퓨팅은 여러 분야에 걸쳐 있는 학문이다.
1. 물리학
2. 수학
3. 컴퓨터과학

물론 본 책에서 다루는 내용에 필요한 모든 학문적 기반을 제공할 것이지만, 이 세 분야에 대한 배경 지식은 이해에 큰 도움이 된다.

이제 이 책에서 다룰 전체 내용을 간략하게 미리보기하도록 하겠다.

== 큐비트
큐비트(qubit)는 quantum bit를 줄인 말로, 디지털 컴퓨터에서 정보의 기본 단위가 비트이듯, 양자컴퓨터에서 정보의 기본 단위이다. 그런데, 큐비트는 일반적인 비트와 무슨 차이가 있을까?

어떤 한 전자의 스핀을 생각해 보자. 전자는 전자기장을 만들며, 스핀은 그 중 자기장을 기술하는 물리량이다. 즉, 전자는 하나의 작은 자석처럼 행동한다.

전자는 페르미온으로, $+ 1/2$ 또는 $- 1/2$의 스핀을 갖는다. 이때 양수 스핀을 $arrow.t$, 음수 스핀을 $arrow.b$로 표시한다. 물리학의 디랙표기법을 빌려 양수 스핀을 가진 전자의 상태는 $ket(arrow.t)$로 쓰자. 또, 음수 스핀을 가진 전자의 상태는 $ket(arrow.b)$라고 하자. 이 두 상태를 기저(basis) 상태라고 하곘다. 이제 이것을 비트로 해석하기 위해 아래와 같이 정의하자.
$
  ket(arrow.t) =: ket(1) \
  ket(arrow.b) =: ket(0)
$

그런데, 이 전자는 꼭 위 두 상태 중 하나에 있어야 하는 것이 아니다. 양자역학에 의하면, 전자의 스핀의 일반적인 상태는 양수 스핀과 음수 스핀의 선형 결합으로 표현될 수 있다.
$
  & ket(psi) = alpha ket(arrow.b) + beta ket(arrow.t) \
  & "where " alpha, beta in CC and abs(alpha)^2 + abs(beta)^2 = 1
$
이제 우리는 여기서부터 큐비트의 발상을 가져올 수 있다. 두 벡터 $ket(0)$과 $ket(1)$을 기저로 갖는 복소평면 $CC^2$를 생각하자. 이제 큐비트 $ket(psi)$는 이 평면 위에서 크기(정확히는 노름)가 1인 벡터이다#footnote[복소수 $a+b i$에 대하여 그 절댓값이 $sqrt(a^2 + b^2)$인 이유도 노름에 관련되어 있다.]. 

이처럼 큐비트는 하나의 값이 아니라, 두 값의 선형 결합을 저장하게 된다. 즉, 고전적인 컴퓨터는 고전적이고 확정적인 원리로 작동하여 비트 하나는 0 또는 1의 값을 갖지만, 큐비트는 양자역학적이고 불확정적인 원리로 작동하여 큐비트 하나는 0과 1을 가중치를 두고 둘 다 갖게 된다. 가중치($alpha, beta$의 계수)를 갖는다는 것은, 어떤 큐비트는 0보다 1에 가까울 수 있고, 어떤 것은 그 반대일 수 있다는 것이며, 그 가까운 정도도 모든 큐비트가 다를 수 있다는 것이다. 

이제 입자와의 상호작용이 발생하면 무슨 일이 일어나는지 보자. 하나의 전자가 아니라, 서로 상호작용하는 전자의 쌍이 있다고 하자. 두 전자의 통합된 스핀 상태를 생각하자. 이때 기저상태는 다음과 같이 존재할 수 있다.
$
  ket(arrow.t arrow.t), ket(arrow.t arrow.b), ket(arrow.b arrow.t), ket(arrow.b arrow.b)
$

일반적인 상태는 이 기저상태들의 중첩(superposition)이 된다.
$
  & ket(psi) = alpha_1 ket(arrow.t arrow.t) + alpha_2 ket(arrow.t arrow.b) + alpha_3 ket(arrow.b arrow.t) + alpha_4 ket(arrow.b arrow.b) \
  <==> & ket(psi) = alpha_1 ket(1 1) + alpha_2 ket(1 0) + alpha_3 ket(0 1) + alpha_4 ket(0 0) \
  & "where " a_i in CC and sum_i abs(a_i)^2 = 1
$

이것을 2-큐비트라고 한다. 여기서 볼 수 있듯, 2-큐비트는 두 개의 고전적인 비트에서 가능한 모든 고전적 상태를 선형 결합으로 갖는다. 이제, 2-큐비트에서 $n$-큐비트로 어떻게 갈지 알 수 있다. 고전적 비트 상태 $n$개를 저장하는 $n$-큐비트는 아래와 같이 문자열로 표현할 수 있다.
$
  overbrace(ket(0100...1), n "비트")
$
이 표현이 번거로우므로 우리는 켓 안에 들어가는 이진수의 십진수 형태를 취하여 간단하게 표현하기로 한다.
$
  ket(k)
$

예를 들어 $n=4$이고 $k=9$라면 이 상태는 무엇일까?
$
  k & = 9 = 1 dot 2^3 + 0 dot 2^2 + 0 dot 2^1 + 1 dot 2^0 \
  & = 1001_"(2)"
$

이므로 해당 상태는
$
  ket(9) = ket(1001) = ket(arrow.t arrow.b arrow.b arrow.t)
$
이 된다.

따라서 $n$-큐비트는 일반적으로 아래와 같이 나타낼 수 있다.
$
  & ket(psi) = sum_(k=0)^(2^n - 1) alpha_k ket(k) \
  & "where " alpha_k in CC and sum_(k=0)^(2^n - 1) abs(alpha_k)^2 = 1
$ <generalQuantumState>

이때 $ket(psi)$는 $CC^2^n$ 상의 벡터이다. 이것은 $n$-큐비트의 복잡도가 $n$의 지수로 증가함을 보여준다. 즉, $n$ 개의 상호작용하는 전자의 스핀을 기술하기 위해서는 $2^n$ 개의 복소수를 저장해야 한다. $n$이 50만 되어도 그 값은 현재의 디지털 컴퓨터로는 범접할 수 없는 크기의 천문학적 숫자가 된다.

이는 원자와 분자에서 스펙트럼의 에너지 준위를 계산하는 문제가 왜 그리 어려운지를 보여주는 단적인 예시이다. 우리는 전자 50개를 가진 분자를 아주 당연하게 상상해 볼 수 있다. 그리고 우리는 그 다중 계의 상태를 기술하는 것이 현재 컴퓨터의 저장 및 계산 능력으로는 불가능에 가까운 수준이라는 것도 확인했다. 하지만 자연은 50개의 전자를 조종하고 에너지에 맞는 스펙트럼을 만들어내는 데 아무런 지장이 없다. 

== 큐비트의 측정
여기서 논점은, 만약 50개의 전자로도 이 정도의 메모리 용량을 만들어낼 수 있다면, 왜 우리는 고전적인 메모리 칩을 버리고 양자역학적 기술로 메모리 칩을 만들지 않냐는 것이다. 이 질문에 대한 답은, 양자계의 가장 큰 문제는 그것이 확률적이라는 것이다. 그에 따라 양자계에 저장된 정보를 불러오는 데 어려움이 생기게 된다.

고전적인 컴퓨터 메모리의 경우, 예를들어 $n$-비트 정보를 특정 주소 범위에 저장해 두었다면, 당연하게도#footnote[메모리가 어떻게 작동하는지 생각이라도 해 보았다면 당연하지 않다는 것을 알 수 있지만, 우리가 매일매일 컴퓨터를 사용하며 느끼기에는 그렇다는 말이다.] 우리는 나중에 메모리의 해당 소에서 정확히 동일한 정보를 불러올 수 있게 된다.

하지만, @generalQuantumState 와 같은 양자 상태에서는 그런 식으로 정보를 불러올 수가 없다. 즉, 계수 $alpha_k$들을 불러올 수 없다는 말이다. 

양자 상태의 정보를 읽는 유일한 방법은 바로 그 계에 대해 측정(measurement)을 수행하는 것이다. 고전적인 상태들의 중첩인 양자 상태의 측정의 결과는 단일 고전 상태가 된다. 즉, 측정은 확률적이다. 

양자 상태 $ket(psi)$의 값에 대한 측정을 수행하면 $abs(alpha_k)^2$의 확률로 고전 상태 값 중 하나인 $k$를 얻는다. @generalQuantumState 가 나타내는 것은 가중치가 적용된 합이다. 어떤 상태는 다른 상태보다 더 높은 확률로 나타날 수 있다. 이 값들은, 측정이라는 시행을 할 때마다 다르게 나타나고, 이것이 양자역학이 여태까지 컴퓨터공학에 사용되지 못했던 이유이다.

정리하자면, 큐비트 체계를 사용할 때의 장점은 엄청난 양의 정보를 저장할 수 있다는 것이고, 단점은 그 정보를 불러오는 것이 매우 어려우며 한 번에 큐비트가 담은 모든 정보를 읽을 수 없다는 것이다.

== 양자 알고리즘
알고리즘이란, 입력과 출력을 가지는 절차를 의미한다. 양자 알고리즘도 알고리즘의 한 종류이다.

입력 상태 $ket(m)$을 가정하자. 이 입력 상태에, 예를 들어 물리적으로 계에 레이저를 쏘는 등의, 특정한 변환 연산을 적용하면, 결과는 $ket(psi)$는 어떤 중첩된 상태가 될 것이다. 이 상태를 얻었다면 이것에 대한 측정을 수행해 출력으로 단일 상태 $ket(s)$를 얻는다. 양자 알고리즘은 이러한 일련의 과정을 효율적, 효과적으로 조작하여 궁극적으로는 측정의 결과가, 거의 항상이라고 볼 수 있는 충분히 높은 확률로 원하는 정보에 대한 값이 나오도록 하는 것에 목적을 둔다. 알고리즘의 개발 과정에서는 항상 믿음직스러운 고전적인 컴퓨터로 양자 알고리즘의 결과가 올바른지 검산해 볼 수 있다.

보다시피, 양자 알고리즘을 설계하는 것은 매우 어려운 일이다. 현재 알려진 것들 중 실제로 유용한 양자 알고리즘은 얼마 없으며, 양자컴퓨팅 이론을 발전시켜 유용하고 효과적인 양자 알고리즘을 더 많이 만들어서 자연이 제공하는 방대한 양의 메모리 용량을 자유롭게 사용할 수 있게 되는 것이 미래의 목표가 되겠다. 하지만, 양자 알고리즘을 설계하는 것 외에, 실제로 양자컴퓨터를 설계하여 만드는 것도 매우 어려운 일#footnote[주석을 작성하는 현재는 좀 더 높은 온도에서 작동하는 양자컴퓨터도 있으나, 여전히 대표적인 대기업들의 선두주자 양자컴퓨터들은 수 켈빈 단위의 초저온에서밖에 작동하지 못한다.]이므로, 이러한 목표를 달성하기 위해서는 수많은 노력이 지속적으로 필요할 것이다.

여기서는 이론적인 부분과 함께, 물리적으로 양자컴퓨터를 실현하는 방법과, 그 앞에 닥친 어려움에 대해서도 이야기해 보겠다.